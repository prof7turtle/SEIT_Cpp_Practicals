/*Implement stack as an abstract data type using singly linked list and use this ADT for conversion of
infix expression to postfix, prefix and evaluation of postfix and prefix expression
*/

#include <bits/stdc++.h>
using namespace std;

struct Node {
    char data;
    Node* next;
};


class Stack{
private:
    Node* top;
    
public :
    // Stack(): top(nullptr){}
    
    Stack() {
        while (top) {
            Node* temp = top;
            top = top->next;
            delete temp;
        }
    }

    void push(char value) {
        Node* newNode = new Node{value, top};
        top = newNode;
    }

    char pop() {
        if (isEmpty()) {
            cout<<"Stack is Empty";
        };
        Node* temp = top;
        char value = top->data;
        top = top->next;
        delete temp;
        return value;
    }

    char peek() const {
        if (isEmpty()) {
            cout<<"Stack is Empty";
        }
        return top->data;
    }

    bool isEmpty() const {
        return top == nullptr;
    }

};

void infix_to_postfix(infix){
    Stack operators;
    String postfix;
}
        
int main(){
    
}    
