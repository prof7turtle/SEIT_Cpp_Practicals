//Searching and Sorting
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question--->>>Consider a student database of SEIT class (at least 3 records). 
Database contains different fields of every student like Roll No, Name and SGPA.(array of structure)
a) Design a roll call list, arrange list of students according to roll numbers in ascending order (Use Bubble Sort)
b) Arrange list of students alphabetically. (Use Insertion sort)
c) Arrange list of students to find out first ten toppers from a class. (Use Quick sort)
d) Search students according to SGPA. If more than one student having same SGPA, then print list
of all students having same SGPA.
e) Search a particular student according to name using binary search without recursion. (all the student records having the presence of search key should be displayed)
(Note: Implement either Bubble sort or Insertion Sort.)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

#include <iostream>

using namespace std;

struct Student{
    unsigned int rollno;
    char name[50];
    float SGPA;
    
};

class SDB{
    private:
    Student s[3];
    int n;
    int num;
    int val;
    
    public:
    SDB(){
        n=3;
    }
    void accept_data(void);
    void display_data(void);
    void bubblesort();
    int lin_search(int num);
    int bin_search(int num);
    int display(int val);
};

void SDB::accept_data(void){
    cout<<"Enter Details for Student DataBase:"<<endl;
    for(int i=0;i<n;i++){
        cout<<"Enter Roll Number:";
        cin>>s[i].rollno;
        cout<<"Enter Name:";
        cin>>s[i].name;
        cout<<"Enter SGPA:";
        cin>>s[i].SGPA;
    }
}

void SDB::display_data(void){
    cout<<"---------------------------------"<<endl;
    cout<<"RollNo\tName\tSGPA"<<endl;
    for(int i=0;i<n;i++){
       
       cout<<"\t"<<s[i].rollno<<"\t"<<s[i].name<<"\t"<<s[i].SGPA<<endl;
        // cout<<"Rollno:"<<s[i].rollno<<endl;
        // cout<<"Name:"<<s[i].name<<endl;
        // cout<<"SGPA:"<<s[i].SGPA<<endl;
        // cout<<endl;
        
    }
    cout<<"---------------------------------"<<endl;
}

void SDB::bubblesort(){
    for(int i=0;i<n;i++){
        for(int j=0;j<n-i;j++){
            if(s[j].rollno>s[j+1].rollno){
                swap(s[j],s[j+1]);
            }
        }
    }
}

int SDB::lin_search(int num){
    for(int i=0;i<n;i++){
        if (s[i].rollno==num){
            cout<<"Rollno:"<<s[i].rollno<<endl;
            cout<<"Name:"<<s[i].name<<endl;
            cout<<"SGPA:"<<s[i].SGPA<<endl;
            cout<<endl;
        }
    }return -1;
}

int SDB::display(int val){
            cout<<"Rollno:"<<s[val].rollno<<endl;
            cout<<"Name:"<<s[val].name<<endl;
            cout<<"SGPA:"<<s[val].SGPA<<endl;
            cout<<endl;
            return -1;
}

int  SDB::bin_search(int num){
    int low=0;
    int high=n-1;
    
    
    while(low<=high){
        int mid=(low+high)/2;
        if(s[mid].rollno==num){
            return mid;
            
        }
        else if(num<s[mid].rollno){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
        
    }return -1;
}


int main(){
    SDB s;
    int val;
    int num;
    s.accept_data();
    s.bubblesort();
    s.display_data();
    cout<<"Enter Roll number you Want To Search: ";
    cin>>num;
    cout<<"Using linerar Search-->"<<endl;
    s.lin_search(num);
    cout<<"Using Binary Search-->"<<endl;
    val=s.bin_search(num);
    s.display(val);
    
    
}
